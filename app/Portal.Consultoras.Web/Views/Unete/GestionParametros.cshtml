@{
    Layout = "~/Views/Shared/_SACLayout.cshtml";
    ViewBag.Title = "Configuración de Parámetros";
}
@(new HtmlString(ViewBag.HTMLSACUnete))
@*@using Portal.Consultoras.Web.HojaInscripcionBelcorpPais
@model Portal.Consultoras.Web.Models.GestionParametroPageModel
@{
    Layout = "~/Views/Shared/_SACLayout.cshtml";
    ViewBag.Title = "Configuración de Parámetros";
}
<script type="text/javascript">
    var chkId = [];
    var modal;
    var parametroCorreo = @Html.Raw(Json.Encode(Model.ParametroCorreo));
    var parametroTelefonico = @Html.Raw(Json.Encode(Model.ParametroTelefonico));
    var parametroTelefonicoExistenZonas = "@( Model.ListaZonasValidacionTelefonicaActiva.Any() || Model.ListaZonasValidacionTelefonicaInactivas.Any() ? 1 : 0)";

    $(function () {
        if (parametroTelefonicoExistenZonas == "1")
            cargarZonasTelefonicas();

        $('#btnGrabar').click(function () {
            modal.dialog("open");
        });
        
        modal = $("#confirm_modal").dialog({
            autoOpen: false,
            closeOnEscape: true,
            draggable: true,
            width: 350,
            minHeight: 50,
            position: 'center',
            height: 250,
            modal: true,
            buttons: {
                "Si": function() {
                    ConfigurarParametros();
                    modal.dialog("close");
                },
                No: function () {
                    modal.dialog("close");
                }
            },
            resizable: false,
            open: function () {
                $('body').css('overflow', 'hidden');
            },
            close: function () {
                $('body').css('overflow', 'auto');
            }
        });
    });

    function cargarZonasTelefonicas() {
        waitingDialog({});
        $.ajaxSetup({ cache: false });

        var listaZonasActivas = @Html.Raw(Json.Encode(Model.ListaZonasValidacionTelefonicaActiva));
        var listaZonasInactivas = @Html.Raw(Json.Encode(Model.ListaZonasValidacionTelefonicaInactivas));

        var lbHas = $('#lbHas');
        var lbHasStorage = $('#lbHasStorage');
        var lbHasNot = $('#lbHasNot');
        var lbHasNotStorage = $('#lbHasNotStorage');

        if (listaZonasActivas.length > 0) {
            for (var item in listaZonasActivas) {
                var optionActivaItem = {
                    value: listaZonasActivas[item].IdParametroUnete,
                    text: listaZonasActivas[item].Nombre
                };

                lbHas.append($('<option/>', optionActivaItem));
                lbHasStorage.append($('<option/>', optionActivaItem));
            }
        }

        if (listaZonasInactivas.length > 0) {
            for (var item in listaZonasInactivas) {
                var optionInactivaItem = {
                    value: listaZonasInactivas[item].IdParametroUnete,
                    text: listaZonasInactivas[item].Nombre
                };

                lbHasNot.append($('<option/>', optionInactivaItem));
                lbHasNotStorage.append($('<option/>', optionInactivaItem));
            }
        }

        closeWaitingDialog();
    }

    function Limpiar() {
        var lbHas = $('#lbHas');
        var lbHasStorage = $('#lbHasStorage');
        var lbHasNot = $('#lbHasNot');
        var lbHasNotStorage = $('#lbHasNotStorage');
        lbHas.empty();
        lbHasStorage.empty();
        lbHasNot.empty();
        lbHasNotStorage.empty();
    }

    function Filter(toFilterID, filter) {
        var newOptions = [];
        var toFilter = document.getElementById(toFilterID);
        var toFilterStorage = document.getElementById(toFilterID.concat("Storage")).options;

        for (var i = 0; i < toFilterStorage.length; i++) {
            if (toFilterStorage[i].text.toLowerCase() != "") {
                newOptions.push(new Option(toFilterStorage[i].text, toFilterStorage[i].value));
            }
        }

        toFilter.options.length = 0;
        for (i = 0; i < newOptions.length; i++) {
            toFilter.options.length++;
            toFilter.options[i] = newOptions[i];
            toFilter.options[i].selected = false;
        }

        return;
    }

    function SortOptions(options, valueType, sortArg) {
        if (sortArg === 'text') {
            if (valueType === 'string') {
                options.sort(function (a, b) {
                    if (a.text.toLowerCase() < b.text.toLowerCase()) { return -1; }
                    if (a.text.toLowerCase() > b.text.toLowerCase()) { return 1; }
                    return 0;
                });
            } else if (valueType === 'int') {
                options.sort(function (a, b) {
                    return a.text - b.text;
                });
            }
        } else if (sortArg === 'value') {
            if (valueType === 'string') {
                options.sort();
            } else if (valueType === 'int') {
                options.sort(function (a, b) {
                    return a.value - b.value;
                });
            }
        }
    }

    function MoveSelected(fromBoxID, toBoxID, sortArg, valueType) {
        var fromBox = document.getElementById(fromBoxID);
        var toBoxStorage = document.getElementById(toBoxID.concat('Storage'));
        var fromBoxStorage = document.getElementById(fromBoxID.concat('Storage'));
        var toBoxFilterText = document.getElementById(toBoxID.concat('Filter')).value;
        var fromBoxFilterText = document.getElementById(fromBoxID.concat('Filter')).value;

        var newToBoxOptions = [];
        var newFromBoxOptions = [];
        var selectedVals = [];

        for (var i = 0; i < toBoxStorage.options.length; i++) {
            newToBoxOptions.push(toBoxStorage.options[i]);
        }

        for (i = 0; i < fromBox.options.length; i++) {
            if (fromBox.options[i].selected) {
                newToBoxOptions.push(fromBox.options[i]);
                selectedVals.push(fromBox.options[i].value);
            }
        }

        var l = fromBoxStorage.options.length;
        for (var j = 0; j < selectedVals.length; j++) {
            for (i = 0; i < l; i++) {
                if (fromBoxStorage.options[i].value == selectedVals[j]) {
                    fromBoxStorage.options[i] = null;
                    break;
                }
            }
        }

        for (i = 0; i < fromBoxStorage.options.length; i++) {
            newFromBoxOptions.push(fromBoxStorage.options[i]);
        }

        toBoxStorage.options.length = 0;
        fromBoxStorage.options.length = 0;

        SortOptions(newToBoxOptions, valueType, sortArg);
        SortOptions(newFromBoxOptions, valueType, sortArg);

        for (i = 0; i < newFromBoxOptions.length; i++) {
            fromBoxStorage.options.length++;
            fromBoxStorage.options[i] = newFromBoxOptions[i];
            fromBoxStorage.options[i].selected = false;
        }

        for (i = 0; i < newToBoxOptions.length; i++) {
            toBoxStorage.options.length++;
            toBoxStorage.options[i] = new Option(newToBoxOptions[i].text, newToBoxOptions[i].value);
            toBoxStorage.options[i].selected = false;
        }

        Filter(toBoxID, toBoxFilterText);
        Filter(fromBoxID, fromBoxFilterText);
        chkId = [];
    }

    function MoveAll(fromBoxID, toBoxID, sortArg, valueType) {
        chkId = [];
        var fromBox = document.getElementById(fromBoxID);

        for (var i = 0; i < fromBox.options.length; i++) {
            fromBox.options[i].selected = true;
        }

        MoveSelected(fromBoxID, toBoxID, sortArg, valueType);
    }

    function ClearFilter(toClearID) {
        var toClearFilter = document.getElementById(toClearID.concat('Filter'));
        toClearFilter.value = "";
        Filter(toClearID, "");
    }

    function ConfigurarParametros() {
        waitingDialog({});

        var listaZonasTelefonicasActivas = document.getElementById('lbHas');
        var listaZonasTelefonicasInactivas = document.getElementById('lbHasNot');

        var jsonData = {
            ListaZonasTelefonicasActivas: [],
            ListaZonasTelefonicasInactivas: [],
            ParametroCorreo: parametroCorreo,
            ParametroTelefono: parametroTelefonico
        };

        parametroCorreo.Valor = ($("#chkValidacionCorreo").is(":checked")) ? "1" : "0";

        if (parametroTelefonico != null) {
            parametroTelefonico.Valor = ($("#chkValidacionTelefonica").is(":checked")) ? "1" : "0";

            if (listaZonasTelefonicasActivas != null) {
                for (var i = 0; i < listaZonasTelefonicasActivas.options.length; i++) {
                    if (listaZonasTelefonicasActivas.options[i].text != "") {
                        jsonData.ListaZonasTelefonicasActivas.push({
                            "IdParametroUnete": listaZonasTelefonicasActivas.options[i].value,
                            "Nombre": listaZonasTelefonicasActivas.options[i].text
                        });
                    }
                }
            }
           
            if (listaZonasTelefonicasInactivas != null) {
                for (var i = 0; i < listaZonasTelefonicasInactivas.options.length; i++) {
                    if (listaZonasTelefonicasInactivas.options[i].text != "") {
                        jsonData.ListaZonasTelefonicasInactivas.push({
                            "IdParametroUnete": listaZonasTelefonicasInactivas.options[i].value,
                            "Nombre": listaZonasTelefonicasInactivas.options[i].text
                        });
                    }
                }
            }
        }

        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("ProcesarParametro", "Unete")',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(jsonData),
            async: true,
            success: function (data) {
                closeWaitingDialog();
            },
            error: function (data, error) {
                closeWaitingDialog();
                alert("Error del Sistema.");
            }
        });
    }
</script>

<style>
    .div-3 .titC {
        width: 140px !important;
    }

    .text-left {
        text-align: left !important;
    }
</style>

<input id="hdFlag" value="0" type="hidden" />
<div class="wrap_cab">
    <div class="filtros2">
        <div class="elements">
            <div class="div-2">
                <h1>Herramienta de <span>Gestión de Parámetros</span></h1>
            </div>
        </div>
    </div>
</div>

<div class="wrap">
    <div class="container clearfix">
        @if(Model.ListaZonasValidacionTelefonicaActiva.Any() || Model.ListaZonasValidacionTelefonicaInactivas.Any())
        {
            <div class="border-wrapper">
                <div class="zonatit">
                    <h3>Zonas con Validación Telefónica</h3>
                </div>
                <div class="zonatit2">
                    <h3>Zonas sin Validación Telefónica</h3>
                </div>
                <div class="zona1">
                    <input type="text" id="lbHasFilter" onkeyup="javascript:Filter('lbHas',this.value);" style="display: none" />
                    @Html.ListBoxFor(s => s.ListaZonasValidacionTelefonicaActiva, new MultiSelectList(new List<ParametroUneteBE>(), "IdParametroUnete", "Nombre"), new
                   {
                       id = "lbHas",
                       style = "height: 200px;width:100%;"
                   })
                </div>
                <div class="zona2">
                    <input id="btnToHasNot" type="button" onclick="MoveSelected('lbHas', 'lbHasNot', 'text', 'string');" value=">" />
                    <input id="btnAllToHasNot" type="button" onclick="MoveAll('lbHas', 'lbHasNot', 'text', 'string');" value=">>" />
                    <input id="btnAllToHas" type="button" onclick="MoveAll('lbHasNot', 'lbHas', 'text', 'string');" value="<<" />
                    <input id="btnToHas" type="button" onclick="MoveSelected('lbHasNot', 'lbHas', 'text', 'string');" value="<" />
                </div>
                <div class="zona3">
                    <input type="text" id="lbHasNotFilter" onkeyup="javascript:Filter('lbHasNot',this.value);" style="display: none" />
                    @Html.ListBoxFor(s => s.ListaZonasValidacionTelefonicaInactivas, new MultiSelectList(new List<ParametroUneteBE>(), "IdParametroUnete", "Nombre"), new
                   {
                       id = "lbHasNot",
                       style = "height: 200px;width:100%;"
                   })
                </div>
            </div>
            <div class="sep"></div>
        }
        else if(Model.ParametroTelefonico != null)
        {
            <div class="elements2">
                <div class="div-3">
                    <div class="titC text-left">Teléfono Requerido</div>
                    <div class="">
                        <input type="checkbox" id="chkValidacionTelefonica" @(Model.ParametroTelefonico.Valor == 1 ? "checked" : "")/>
                    </div>
                </div>
            </div>
        }
        
        <div class="elements2">
            <div class="div-3">
                <div class="titC text-left">Correo Requerido</div>
                <div class="">
                    <input type="checkbox" id="chkValidacionCorreo" @(Model.ParametroCorreo.Valor == 1 ? "checked" : "") />
                </div>
            </div>
        </div>
        <div class="elements2">
            <div class="div-3">
                <div class="input_validar">
                    <input type="button" value="Grabar" id="btnGrabar" />
                </div>
            </div>
        </div>

    </div>
</div>

<div id="loadingScreen"></div>
<select id="lbHasStorage" multiple="multiple" style="height: 300px; width: 300px; display: none"></select>
<select id="lbHasNotStorage" multiple="multiple" style="height: 300px; width: 300px; display: none"></select>

<div id="confirm_modal" class="modal_base" style="display:none;" title="¿Seguro de efectuar la operación?">
    <div class="content" id="modal_content">
        <ul>
            <li>Recuerde que al desactivar, a partir de ahora todas las postulantes no requerirán validar la condición y pasarán automáticamente al siguiente estado, inclusive aquellas que actualmente requerían hacerlo.</li>
            <li>Recuerde que al activar, a partir de ahora todas las postulantes si requerirán validar la condición</li>
        </ul>
    </div>
</div>*@
