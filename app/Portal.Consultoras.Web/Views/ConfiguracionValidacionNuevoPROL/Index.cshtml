@model Portal.Consultoras.Web.Models.ConfiguracionValidacionNuevoPROLModel
@{
    ViewBag.Title = "Configuración Validación PROL v2";
}
<script type="text/javascript">
    var chkId = [];
    $(function () {
        $('#PaisID').change(function () {
            var Id = $(this).val();
            Limpiar();
            if (Id != null && Id != '') {
                waitingDialog({});
                $.ajaxSetup({ cache: false });
                
                $.getJSON(baseUrl + 'ConfiguracionValidacionNuevoPROL/GetConfiguracionValidacionNuevoPROL', { PaisID: Id }, function (data) {
                    var lbHas = $('#lbHas');
                    var lbHasStorage = $('#lbHasStorage');
                    var lbHasNot = $('#lbHasNot');
                    var lbHasNotStorage = $('#lbHasNotStorage');
                    if (data.listaZonas.length > 0) {
                        for (var item in data.listaZonas) {
                            lbHas.append($('<option/>', {
                                value: data.listaZonas[item].ZonaID,
                                text: data.listaZonas[item].Codigo
                            }));

                        }
                        for (var item in data.listaZonas) {
                            lbHasStorage.append($('<option/>', {
                                value: data.listaZonas[item].ZonaID,
                                text: data.listaZonas[item].Codigo
                            }));
                        }
                    }

                    if (data.listaZonasNuevoPROL.length > 0) {
                        for (var item in data.listaZonasNuevoPROL) {
                            lbHasNot.append($('<option/>', {
                                value: data.listaZonasNuevoPROL[item].ZonaID,
                                text: data.listaZonasNuevoPROL[item].Codigo
                            }));
                        }
                        for (var item in data.listaZonasNuevoPROL) {
                            lbHasNotStorage.append($('<option/>', {
                                value: data.listaZonasNuevoPROL[item].ZonaID,
                                text: data.listaZonasNuevoPROL[item].Codigo
                            }));
                        }
                    }
                    closeWaitingDialog();
                });
            }
        });

        $('#btnGrabar').click(function () {
            ConfigurarNuevoPROL();
        });
    });

    function Limpiar() {
        var lbHas = $('#lbHas');
        var lbHasStorage = $('#lbHasStorage');
        var lbHasNot = $('#lbHasNot');
        var lbHasNotStorage = $('#lbHasNotStorage');
        lbHas.empty();
        lbHasStorage.empty();
        lbHasNot.empty();
        lbHasNotStorage.empty();
    }

    function Filter(toFilterID, filter) {
        var newOptions = [];
        var toFilter = document.getElementById(toFilterID);
        var toFilterStorage = document.getElementById(toFilterID.concat("Storage")).options;

        for (var i = 0; i < toFilterStorage.length; i++) {
            if (toFilterStorage[i].text.toLowerCase() != "") {
                newOptions.push(new Option(toFilterStorage[i].text, toFilterStorage[i].value));
            }
        }

        toFilter.options.length = 0;
        for (i = 0; i < newOptions.length; i++) {
            toFilter.options.length++;
            toFilter.options[i] = newOptions[i];
            toFilter.options[i].selected = false;
        }

        return;
    }

    function SortOptions(options, valueType, sortArg) {
        if (sortArg === 'text') {
            if (valueType === 'string') {
                options.sort(function (a, b) {
                    if (a.text.toLowerCase() < b.text.toLowerCase()) { return -1; }
                    if (a.text.toLowerCase() > b.text.toLowerCase()) { return 1; }
                    return 0;
                });
            } else if (valueType === 'int') {
                options.sort(function (a, b) {
                    return a.text - b.text;
                });
            }
        } else if (sortArg === 'value') {
            if (valueType === 'string') {
                options.sort();
            } else if (valueType === 'int') {
                options.sort(function (a, b) {
                    return a.value - b.value;
                });
            }
        }
    }

    function MoveSelected(fromBoxID, toBoxID, sortArg, valueType) {
        var fromBox = document.getElementById(fromBoxID);
        var toBoxStorage = document.getElementById(toBoxID.concat('Storage'));
        var fromBoxStorage = document.getElementById(fromBoxID.concat('Storage'));
        var toBoxFilterText = document.getElementById(toBoxID.concat('Filter')).value;
        var fromBoxFilterText = document.getElementById(fromBoxID.concat('Filter')).value;

        var newToBoxOptions = [];
        var newFromBoxOptions = [];
        var selectedVals = [];

        for (var i = 0; i < toBoxStorage.options.length; i++) {
            newToBoxOptions.push(toBoxStorage.options[i]);
        }

        for (i = 0; i < fromBox.options.length; i++) {
            if (fromBox.options[i].selected) {
                newToBoxOptions.push(fromBox.options[i]);
                selectedVals.push(fromBox.options[i].value);
            }
        }
        
        var l = fromBoxStorage.options.length;
        for (var j = 0; j < selectedVals.length; j++) {
            for (i = 0; i < l; i++) {
                if (fromBoxStorage.options[i].value == selectedVals[j]) {
                    fromBoxStorage.options[i] = null;
                    break;
                }
            }
        }

        for (i = 0; i < fromBoxStorage.options.length; i++) {
            newFromBoxOptions.push(fromBoxStorage.options[i]);
        }

        toBoxStorage.options.length = 0;
        fromBoxStorage.options.length = 0;

        SortOptions(newToBoxOptions, valueType, sortArg);
        SortOptions(newFromBoxOptions, valueType, sortArg);

        for (i = 0; i < newFromBoxOptions.length; i++) {
            fromBoxStorage.options.length++;
            fromBoxStorage.options[i] = newFromBoxOptions[i];
            fromBoxStorage.options[i].selected = false;
        }

        for (i = 0; i < newToBoxOptions.length; i++) {
            toBoxStorage.options.length++;
            toBoxStorage.options[i] = new Option(newToBoxOptions[i].text, newToBoxOptions[i].value);
            toBoxStorage.options[i].selected = false;
        }

        Filter(toBoxID, toBoxFilterText);
        Filter(fromBoxID, fromBoxFilterText);
        chkId = [];
    }

    function MoveAll(fromBoxID, toBoxID, sortArg, valueType) {
        chkId = [];
        var fromBox = document.getElementById(fromBoxID);

        for (var i = 0; i < fromBox.options.length; i++) {
            fromBox.options[i].selected = true;
        }
      
        MoveSelected(fromBoxID, toBoxID, sortArg, valueType);
    }

    function ClearFilter(toClearID) {
        var toClearFilter = document.getElementById(toClearID.concat('Filter'));
        toClearFilter.value = "";
        Filter(toClearID, "");
    }

    function ConfigurarNuevoPROL() {
        waitingDialog({});
        var PaisID = jQuery.trim($("#PaisID").val());

        var listaZonasPROL = document.getElementById('lbHas');
        var listaZonasNuevoPROL = document.getElementById('lbHasNot');


        var JsonData = {
            listaZonasPROL: [],
            listaZonasNuevoPROL: [],
            PaisID: PaisID
        };

        for (var i = 0; i < listaZonasPROL.options.length; i++) {
            if (listaZonasPROL.options[i].text != "") {
                JsonData.listaZonasPROL.push({
                    "ZonaID": listaZonasPROL.options[i].value,
                    "Codigo": listaZonasPROL.options[i].text
                });
            }
        }

        for (var i = 0; i < listaZonasNuevoPROL.options.length; i++) {
            if (listaZonasNuevoPROL.options[i].text != "") {
                JsonData.listaZonasNuevoPROL.push({
                    "ZonaID": listaZonasNuevoPROL.options[i].value,
                    "Codigo": listaZonasNuevoPROL.options[i].text
                });
            }
        }

        jQuery.ajax({
            type: 'POST',
            url: baseUrl + 'ConfiguracionValidacionNuevoPROL/ConfigurarZonasNuevoPROL',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(JsonData),
            async: true,
            success: function (data) {
                closeWaitingDialog();
                if (data.success == true) {
                    var item = data.items;
                    alert(data.message);
                }
                else {

                    alert(data.message);
                }
            },
            error: function (data, error) {
                closeWaitingDialog();
                alert("Error del Sistema.");
            }
        });
    }
</script>

<input id="hdFlag" value="0" type="hidden" />
<div class="wrap_cab">
    <div class="filtros2">
        <div class="elements">
            <div class="div-2">
                <h1>Configuración <span>Validación PROL v2</span></h1>
            </div>
            <div class="div-3">
                <div class="titJ">País:</div>
                <div class="selectP borde_redondeado">
                    @Html.DropDownListFor(model => model.PaisID, new SelectList(Model.listaPaises, "PaisID", "Nombre"), "-- Seleccionar --")
                </div>
                <div class="titD"></div>

            </div>
        </div>
    </div>
</div>

<div class="wrap">
    <div class="container clearfix">

        <div class="border-wrapper">

            <div class="zonatit">
                <h3>Zonas Disponibles (PROL v1)</h3>
            </div>
            <div class="zonatit2">
                <h3>Zonas Activas (PROL v2)</h3>
            </div>
            <div class="zona1">
                <input type="text" id="lbHasFilter" onkeyup="javascript:Filter('lbHas',this.value);" style="display: none" />
                @Html.ListBoxFor(s => s.listaZonasPROL, new MultiSelectList(Model.listaZonasPROL, "ZonaID", "Codigo"), new
                   {
                       id = "lbHas",
                       style = "height: 200px;width:100%;"
                   })
            </div>
            <div class="zona2">
                <input id="btnToHasNot" type="button" onclick="MoveSelected('lbHas', 'lbHasNot', 'text', 'string');" value=">" />
                <input id="btnAllToHasNot" type="button" onclick="MoveAll('lbHas', 'lbHasNot', 'text', 'string');" value=">>" />
                <input id="btnAllToHas" type="button" onclick="MoveAll('lbHasNot', 'lbHas', 'text', 'string');" value="<<" />
                <input id="btnToHas" type="button" onclick="MoveSelected('lbHasNot', 'lbHas', 'text', 'string');" value="<" />
            </div>
            <div class="zona3">
                <input type="text" id="lbHasNotFilter" onkeyup="javascript:Filter('lbHasNot',this.value);" style="display: none" />
                @Html.ListBoxFor(s => s.listaZonasNuevoPROL, new MultiSelectList(Model.listaZonasNuevoPROL, "ZonaID", "Codigo"), new
                   {
                       id = "lbHasNot",
                       style = "height: 200px;width:100%;"
                   })
            </div>
        </div>
        <div class="sep"></div>

        <div class="elements2">
            <div class="div-3">

                <div class="input_validar">
                    <input type="button" value="Grabar" id="btnGrabar" />
                </div>
            </div>
        </div>

    </div>
</div>


<div id="loadingScreen"></div>
<select id="lbHasStorage" multiple="multiple" style="height: 300px; width: 300px; display: none"></select>
<select id="lbHasNotStorage" multiple="multiple" style="height: 300px; width: 300px; display: none"></select>
